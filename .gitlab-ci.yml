# .gitlab-ci.yml file

image: node:latest
cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm/

# D√©finition des ancres (anchors)
.default_rules: &default_rules
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'

.needs_unit_test: &needs_unit_test
  needs:
    - unit-test

# D√©finition des stages de la pipeline
stages:
  - validate
  - test
  - build
  - release
  - deploy

# Installation des d√©pendances (√©tape pr√©liminaire)
install:
  stage: .pre  # √âtape sp√©ciale ex√©cut√©e avant tout le reste
  script:
    # Installer les d√©pendances en utilisant le cache npm
    - npm ci --cache .npm --prefer-offline

# üöÄ Nouveau Job Only-Canary (ex√©cut√© uniquement si ENV_TARGET == "canary")
only-canary:
  stage: validate
  script:
    - echo "Hello Only Canary !"
  rules:
    - if: '$ENV_TARGET == "canary"'

# Jobs avec les ancres
lint:
  stage: validate
  script:
    - npm run lint
  <<: *default_rules

unit-test:
  stage: test
  script:
    - npm test
  <<: *default_rules

integration-test:
  stage: test
  script:
    - echo "Hello Integration !"
  <<: *default_rules
  <<: *needs_unit_test

# üöÄ Nouveau Job E2E-Test (uniquement dans les Merge Requests)
e2e-test:
  stage: test
  script:
    - echo "Hello E2E !"
  <<: *needs_unit_test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# √âtape de release
release:
  stage: release
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null && $CI_COMMIT_TITLE !~ /^chore: release/'
  before_script:
    - git config user.email $GITLAB_USER_EMAIL
    - git config user.name $GITLAB_USER_NAME
    - git remote set-url origin "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git checkout $CI_COMMIT_BRANCH
    - git pull origin $CI_COMMIT_BRANCH --rebase
  script:
    - npx --yes release-it --ci
